) |>
arrange(state,year)
#write.csv(merged,paste0(path,"data/clean/merged.csv"), row.names=FALSE)
saveRDS(merged,paste0(path,"data/clean/merged.rds"))
write.csv(merged,paste0(path,"data/clean/merged.csv"), row.names=FALSE)
min(merged$fills_per,na.rm=TRUE)
max(merged$fills_per,na.rm=TRUE)
View(merged)
View(denom)
### Load data
denom <- read_excel(paste0(denompath,"denom.xlsx")) |>
mutate(num17 = ifelse(is.na(num17),num18,num17),
num18 = ifelse(is.na(num18),(num17+num19)/2,num18),
num20 = ifelse(is.na(num20),(num19+num21)/2,num20),
num22 = num21) |>
full_join(as_tibble(cbind(state.abb,state.name)), by=c("State"="state.name")) |>
mutate(state = case_when(State == "United States" ~ "US",
.default = state.abb))
### Load data
denom <- read_excel(paste0(denompath,"denom.xlsx")) |>
mutate(num17 = ifelse(is.na(num17),num18,num17),
num18 = ifelse(is.na(num18),(num17+num19)/2,num18),
num20 = ifelse(is.na(num20),(num19+num21)/2,num20),
num22 = num21) |>
full_join(as_tibble(cbind(state.abb,state.name)), by=c("State"="state.name")) |>
mutate(state = case_when(State == "United States" ~ "US",
.default = state.abb)) |>
select(state,starts_with("num")) |>
pivot_longer(!state, names_to = "year", values_to = "denom", names_prefix = "num") |>
mutate(year = factor(as.numeric(year) + 2000)) |>
filter(!is.na(state)) |>
### Save
saveRDS(denom,paste0(path,"data/clean/denom.rds"))
### Load data
denom <- read_excel(paste0(denompath,"denom.xlsx")) |>
mutate(num17 = ifelse(is.na(num17),num18,num17),
num18 = ifelse(is.na(num18),(num17+num19)/2,num18),
num20 = ifelse(is.na(num20),(num19+num21)/2,num20),
num22 = num21) |>
full_join(as_tibble(cbind(state.abb,state.name)), by=c("State"="state.name")) |>
mutate(state = case_when(State == "United States" ~ "US",
.default = state.abb)) |>
select(state,starts_with("num")) |>
pivot_longer(!state, names_to = "year", values_to = "denom", names_prefix = "num") |>
mutate(year = factor(as.numeric(year) + 2000)) |>
filter(!is.na(state)) |>
### Save
saveRDS(denom,paste0(path,"data/clean/denom.rds"))
### Load data
denom <- read_excel(paste0(denompath,"denom.xlsx")) |>
mutate(num17 = ifelse(is.na(num17),num18,num17),
num18 = ifelse(is.na(num18),(num17+num19)/2,num18),
num20 = ifelse(is.na(num20),(num19+num21)/2,num20),
num22 = num21) |>
full_join(as_tibble(cbind(state.abb,state.name)), by=c("State"="state.name")) |>
mutate(state = case_when(State == "United States" ~ "US",
.default = state.abb)) |>
select(state,starts_with("num")) |>
pivot_longer(!state, names_to = "year", values_to = "denom", names_prefix = "num") |>
mutate(year = factor(as.numeric(year) + 2000)) |>
filter(!is.na(state))
### Save
saveRDS(denom,paste0(path,"data/clean/denom.rds"))
denom <- readRDS(paste0(path,"data/clean/denom.rds"))
### Merge three data sources
merged <- sdud_ |>
#full_join(nssats_, by=c("year","state","route")) |>
mutate(fills = case_when(is.na(fills) ~ 0,
.default = fills)) |>
full_join(denom, by=c("state","year")) |>
mutate(fills_per = fills/denom#,
#facilities_per = facilitycnt/denom * 1000
) |>
arrange(state,year)
View(merged)
merged <- sdud_ |>
#full_join(nssats_, by=c("year","state","route")) |>
complete(year,state,route)
View(merged)
### Merge three data sources
merged <- sdud_ |>
#full_join(nssats_, by=c("year","state","route")) |>
complete(year,state,route) |>
mutate(fills = case_when(is.na(fills) ~ 0,
.default = fills)) |>
full_join(denom, by=c("state","year")) |>
mutate(fills_per = fills/denom#,
#facilities_per = facilitycnt/denom * 1000
) |>
arrange(state,year)
View(merged)
#write.csv(merged,paste0(path,"data/clean/merged.csv"), row.names=FALSE)
saveRDS(merged,paste0(path,"data/clean/merged.rds"))
min(merged$fills_per,na.rm=TRUE)
max(merged$fills_per,na.rm=TRUE)
path <- "C:/Users/Rachael Ross/Local/Git/Inj-BUP-Availability-Prescribing/"
library(tidyverse)
library(data.table)
library(ggplot2)
library(scales)
library(ggpubr)
library(ggridges)
library(gt)
library(flextable)
library(maps)
library(mapproj)
dat <- readRDS(paste0(path,"data/clean/merged.rds")) |>
mutate(state_star = ifelse(state %in% c("AK","AZ","CT","FL","GA","HI","IA","KS","LA",
"MT","NE","NV","OK","OR","SD","TN","TX","WY"), paste0(state,"*"),state))
View(dat)
#write.csv(merged,paste0(path,"data/clean/merged.csv"), row.names=FALSE)
saveRDS(merged,paste0(path,"data/clean/merged.rds"))
path <- "C:/Users/Rachael Ross/Local/Git/Inj-BUP-Availability-Prescribing/"
#nssats <- readRDS(paste0(path,"data/clean/nssatsclean.rds"))
sdud <- readRDS(paste0(path,"data/clean/sdudclean.rds"))
denom <- readRDS(paste0(path,"data/clean/denom.rds"))
############################################
# Transform and merge
############################################
### SDUD
sdud_ <- sdud |>
rename(fills=count) |>
filter(moud=="bup") |>
select(year,state,route,fills) |>
filter(route %in% c("Oral","Injection")) |>
mutate(year = as.factor(year)) |>
filter(!(state %in% c("ZZ","PR","DC")))
# ### NSSATS
# setDT(nssats)
#
# # by state
# bystate <- nssats[!(STATE %in% c("ZZ","PR","DC")),.(facilityn = .N,
#                      cnt_Oral = sum(m_buporal, na.rm = TRUE),
#                      cnt_Injection = sum(m_bupxr, na.rm = TRUE),
#                      prop_Oral = mean(m_buporal, na.rm = TRUE),
#                      prop_Injection = mean(m_bupxr, na.rm = TRUE)), by=.(year,STATE)]
#
#
# cnt <- c("cnt_Oral", "cnt_Injection")
# prop <- c("prop_Oral", "prop_Injection")
# bystatelong <- melt(bystate, id.vars = c("year", "STATE", "facilityn"),
#              measure.vars = list(cnt,prop),
#              value.name = c("facilitycnt","facilityprop")) |>
#   mutate(route = case_when(variable==1 ~ "Oral",
#                            variable==2 ~ "Injection",
#                            .default = NA)) |>
#   select(-variable) |>
#   rename(state=STATE)
#
# # national
# natnl <- nssats[!(STATE %in% c("ZZ","PR","DC")),.(facilityn = .N,
#                      cnt_Oral = sum(m_buporal, na.rm = TRUE),
#                      cnt_Injection = sum(m_bupxr, na.rm = TRUE),
#                      prop_Oral = mean(m_buporal, na.rm = TRUE),
#                      prop_Injection = mean(m_bupxr, na.rm = TRUE)), by=.(year)]
#
# natnllong <- melt(natnl, id.vars = c("year", "facilityn"),
#                     measure.vars = list(cnt,prop),
#                     value.name = c("facilitycnt","facilityprop")) |>
#   mutate(route = case_when(variable==1 ~ "Oral",
#                            variable==2 ~ "Injection",
#                            .default = NA)) |>
#   select(-variable) |>
#   mutate(state="US")
#
# # Combine
# nssats_ <- rbind(bystatelong,natnllong)
### Merge three data sources
merged <- sdud_ |>
#full_join(nssats_, by=c("year","state","route")) |>
complete(year,state,route) |>
mutate(fills = case_when(is.na(fills) ~ 0,
.default = fills)) |>
full_join(denom, by=c("state","year")) |>
mutate(fills_per = fills/denom #,
#facilities_per = facilitycnt/denom * 1000
) |>
arrange(state,year)
#write.csv(merged,paste0(path,"data/clean/merged.csv"), row.names=FALSE)
saveRDS(merged,paste0(path,"data/clean/merged.rds"))
write.csv(merged,paste0(path,"data/clean/merged.csv"), row.names=FALSE)
dat <- readRDS(paste0(path,"data/clean/merged.rds")) |>
mutate(state_star = ifelse(state %in% c("AK","AZ","CT","FL","GA","HI","IA","KS","LA",
"MT","NE","NV","OK","OR","SD","TN","TX","WY"), paste0(state,"*"),state))
oral <- dat |>
filter(state=="US") |>
filter(route=="Oral") %>%
ggplot(.,aes(x = year, y=fills, group = 1)) +
geom_line(col="#2e4057"  , linewidth=1) +
geom_point(size=2) +
theme_classic() +
theme(panel.grid.major = element_line(colour="lightgray", size=0.5)) +
xlab("Year") +
ylab("Prescription fills") +
scale_y_continuous(labels = comma) +
scale_x_discrete(expand = c(.03,0))
oral <- dat |>
filter(state=="US") |>
filter(route=="Oral") %>%
ggplot(.,aes(x = year, y=fills, group = 1)) +
geom_line(col="#2e4057"  , linewidth=1) +
geom_point(size=2) +
theme_classic() +
theme(panel.grid.major = element_line(colour="lightgray", linewidth=0.5)) +
xlab("Year") +
ylab("Prescription fills") +
scale_y_continuous(labels = comma) +
scale_x_discrete(expand = c(.03,0))
oral
inj <- dat |>
filter(state=="US") |>
filter(route=="Injection") %>%
ggplot(.,aes(x = year, y=fills, group = 1)) +
geom_line(col="#2e4057"  , linewidth=1) +
geom_point(size=2) +
theme_classic() +
theme(panel.grid.major = element_line(colour="lightgray", size=0.5)) +
xlab("Year") +
ylab("Prescription fills") +
scale_y_continuous(breaks=seq(0, 200000, 50000),
labels = comma,
expand = c(0, 5000),
limits = c(0,200000)) +
scale_x_discrete(expand = c(.03,0))
ggarrange(inj,oral, labels=c("A","B"), nrow=1,
font.label = list(size = 12))
View(merged)
# Rates
oral <- dat |>
filter(state=="US") |>
filter(route=="Oral") %>%
ggplot(.,aes(x = year, y=fills_per, group = 1)) +
geom_line(col="#2e4057"  , linewidth=1) +
geom_point(size=2) +
theme_classic() +
theme(panel.grid.major = element_line(colour="lightgray", linewidth=0.5)) +
xlab("Year") +
ylab("Prescription fills per 100 beneficiaries") +
scale_y_continuous(labels = comma) +
scale_x_discrete(expand = c(.03,0))
oral
inj <- dat |>
filter(state=="US") |>
filter(route=="Injection") %>%
ggplot(.,aes(x = year, y=fills_per, group = 1)) +
geom_line(col="#2e4057"  , linewidth=1) +
geom_point(size=2) +
theme_classic() +
theme(panel.grid.major = element_line(colour="lightgray", size=0.5)) +
xlab("Year") +
ylab("Prescription fills per 100 beneficiaries") +
#scale_y_continuous(breaks=seq(0, 200000, 50000),
#labels = comma,
#expand = c(0, 5000),
#limits = c(0,200000)) +
scale_x_discrete(expand = c(.03,0))
inj
ggarrange(inj,oral, labels=c("A","B"), nrow=1,
font.label = list(size = 12))
# Rates
oral <- dat |>
filter(state=="US") |>
filter(route=="Oral") %>%
ggplot(.,aes(x = year, y=fills_per, group = 1)) +
geom_line(col="#2e4057"  , linewidth=1) +
geom_point(size=2) +
theme_classic() +
theme(panel.grid.major = element_line(colour="lightgray", linewidth=0.5)) +
xlab("Year") +
ylab("Fills per 100 beneficiaries") +
scale_y_continuous(labels = comma) +
scale_x_discrete(expand = c(.03,0))
inj <- dat |>
filter(state=="US") |>
filter(route=="Injection") %>%
ggplot(.,aes(x = year, y=fills_per, group = 1)) +
geom_line(col="#2e4057"  , linewidth=1) +
geom_point(size=2) +
theme_classic() +
theme(panel.grid.major = element_line(colour="lightgray", size=0.5)) +
xlab("Year") +
ylab("Fills per 100 beneficiaries") +
#scale_y_continuous(breaks=seq(0, 200000, 50000),
#labels = comma,
#expand = c(0, 5000),
#limits = c(0,200000)) +
scale_x_discrete(expand = c(.03,0))
ggarrange(inj,oral, labels=c("A","B"), nrow=1,
font.label = list(size = 12))
fills_permax <- 20
fillsmax <- 5000
statesdat <- dat |>
filter(state!="US") |>
filter(state!="TN") |>
filter(route=="Injection") |>
dplyr::select(year,state_star,fills_per,fills) |>
complete(year,state_star) |>
mutate(arrowstart = 0,
fills_per = ifelse(is.na(fills_per),0,fills_per)*100,
fills_per_max = min(max(fills_per),fills_permax),
fills_per_arrowend = ifelse(fills_per>fills_permax,fills_permax,NA),
fills = ifelse(is.na(fills),0,fills),
fills_max = min(max(fills),fillsmax),
fills_arrowend = ifelse(fills>fillsmax,fillsmax,NA),
.by=state_star)
mycolors <- c("#2e5745",
"#6c897c",
"#abbbb4",
"#b4abbb",
"#7c6c89",
"#452e57")
lollipop <- function(variable,max,axistitle){
perflag <- grepl("per",deparse(substitute(variable)))
var <- ensym(variable)
varmax <- paste0(deparse(substitute(variable)),"_max")
varend <- paste0(deparse(substitute(variable)),"_arrowend")
stateorder <- statesdat |>
filter(year==2022) |>
arrange(!!var) |>
#arrange(fills) |>
pull(state_star)
statesdat |>
ggplot() +
geom_segment( aes(x=state_star, xend=state_star,
y=!!var, yend=!!sym(varmax)), color="darkgrey") +
geom_segment( aes(x=state_star, xend=state_star,
y=arrowstart, yend=!!sym(varend), group=year), lineend = "round", linejoin = "round",
color="darkgrey", arrow = arrow(length = unit(0.07, "inches"))) +
geom_point( aes(x=state_star, y=!!var, group=year, color=year),  size=2) +
coord_flip(clip = "off")+
scale_x_discrete(limits=stateorder) +
xlab("") +
ylab(axistitle) +
theme_classic() +
theme(
#legend.position = "top",
legend.position = "none",
legend.title = element_blank(),
panel.grid.major.x = element_line(color = "lightgray",
linewidth = 0.5,
linetype = 2)
) +
scale_y_continuous(expand = c(.01,0),
limits = c(0,max),labels = comma)+
scale_color_manual(values = mycolors) +
scale_fill_manual(values = mycolors) +
guides(color=guide_legend(nrow=1)) +
theme(plot.margin = margin(5.5, 9, 5.5, 5.5, "pt"))
}
rx <- lollipop(fills,fillsmax,"Number of prescription fills")
rx
#rx <- lollipop(fills,fillsmax,"Number of prescription fills")
rx_per <- lollipop(fills_per,fills_permax,"Fills per 100 beneficiaries")
rx_per
statesdat |>
filter(year==2022) |>
filter(fills_per >fills_permax) |>
dplyr::select(state_star,fills_per) |>
arrange(-fills_per) |>
flextable() |>
set_header_labels(state_star = "State",
fills_per = "Number") |>
colformat_double(digits = 1
)
#rx <- lollipop(fills,fillsmax,"Number of prescription fills")
lollipop(fills_per,fills_permax,"Fills per 100 beneficiaries")
statesdat |>
filter(year==2022) |>
filter(fills_per >fills_permax) |>
dplyr::select(state_star,fills_per) |>
arrange(-fills_per) |>
flextable() |>
set_header_labels(state_star = "State",
fills_per = "Number") |>
colformat_double(digits = 1
)
statesdat <- dat |>
filter(state!="US") |>
#filter(state!="TN") |>
filter(route=="Injection") |>
dplyr::select(year,state,fills_per,fills) |>
complete(year,state) |>
mutate(fills_per = ifelse(state=="TN",NA,
ifelse(is.na(fills_per),0,fills_per)*100),
fills = ifelse(state=="TN",NA,
ifelse(is.na(fills),0,fills)))
View(statesdat)
statesdat <- dat |>
filter(state!="US") |>
#filter(state!="TN") |>
filter(route=="Injection") |>
dplyr::select(year,state,fills_per,fills) |>
complete(year,state) |>
mutate(fills_per = ifelse(is.na(fills_per),0,fills_per)*100,
fills = ifelse(is.na(fills),0,fills))
states <- map_data("state") |>
mutate(Region = str_to_title(region)) |>
full_join(as_tibble(cbind(state.abb,state.name)), by=c("Region"="state.name")) |>
left_join(statesdat, by=c("state.abb"="state")) |>
arrange(order) |>
filter(year %in% c(2018,2019,2020,2021,2022)) |>
mutate(fills_per = ifelse(fills_per >20,20,fills_per))
mycolors <- c("white",#"#b4abbb",
"#452e57")
ggplot(data=states, aes(long, lat)) +
geom_polygon(aes(group=group, fill=fills_per)) +
geom_polygon(aes(group=group), color="lightgray",
linewidth=.2,fill=NA) +
coord_map() +
facet_wrap(vars(year), nrow = 3) +
theme(
strip.text.x = element_text(
size = 12, face = "bold"
)
) +
scale_fill_gradientn(colors=mycolors,
breaks=c(0,5,10,15,20),
labels=c("0","5","10","15",">20"),
na.value = "darkgray",
guide = guide_colorbar(
frame.colour = "black",
ticks.colour = "black")) +
theme(rect = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
axis.title = element_blank(),
legend.title = element_blank(),
legend.position = c(0.70,.15),
legend.direction="horizontal")
# Libraries ----
library(tidyverse)
# Simulate data ----
set.seed(7)
n <- 100000
dat <- tibble(
L = rbinom(n, size = 1, p=0.2),
A = rbinom(n, size = 1, p=.2 + .3*L),
Y_1 = rbinom(n, size = 1, p=0.1 + 0.2*1 + 0.2*L + 0.2*1*L),
Y_0 = rbinom(n, size = 1, p=0.1 + 0.2*0 + 0.2*L + 0.2*0*L),
Y = A*Y_1 + (1-A)*Y_0
)
# Truth ----
mean(Y_1)
dat <- tibble(
L = rbinom(n, size = 1, p=0.2),
A = rbinom(n, size = 1, p=.2 + .3*L),
Y_1 = rbinom(n, size = 1, p=0.1 + 0.2*1 + 0.2*L + 0.2*1*L),
Y_0 = rbinom(n, size = 1, p=0.1 + 0.2*0 + 0.2*L + 0.2*0*L),
Y = A*Y_1 + (1-A)*Y_0
)
# Truth ----
mean(dat$Y_1)
mean(dat$Y_0)
mean(dat$Y_1)-mean(dat$Y_0)
# Simulate data ----
set.seed(7)
n <- 100000
dat <- tibble(
L = rbinom(n, size = 1, p=0.2),
A = rbinom(n, size = 1, p=.2 + .3*L),
Y_1 = rbinom(n, size = 1, p=0.1 + 0.2*1 + 0.2*L + 0.2*1*L),
Y_0 = rbinom(n, size = 1, p=0.1 + 0.2*0 + 0.2*L + 0.2*0*L),
Y = A*Y_1 + (1-A)*Y_0
)
# Truth ----
mean(dat$Y_1)
mean(dat$Y_0)
mean(dat$Y_1)-mean(dat$Y_0)
set.seed(7)
n <- 100000
dat <- tibble(
L = rbinom(n, size = 1, p=0.2),
A = rbinom(n, size = 1, p=.2 + .3*L),
Y_1 = rbinom(n, size = 1, p=0.1 + 0.2*1 + 0.2*L + 0.2*1*L),
Y_0 = rbinom(n, size = 1, p=0.1 + 0.2*0 + 0.2*L + 0.2*0*L),
Y = A*Y_1 + (1-A)*Y_0
)
# Truth ----
mean(dat$Y_1)
mean(dat$Y_0)
mean(dat$Y_1)-mean(dat$Y_0)
set.seed(7)
n <- 100000
dat <- tibble(
L = rbinom(n, size = 1, p=0.2),
A = rbinom(n, size = 1, p=.2 + .3*L),
Y_1 = rbinom(n, size = 1, p=0.1 + 0.1*1 + 0.2*L + 0.2*1*L),
Y_0 = rbinom(n, size = 1, p=0.1 + 0.1*0 + 0.2*L + 0.2*0*L),
Y = A*Y_1 + (1-A)*Y_0
)
# Truth ----
mean(dat$Y_1)
mean(dat$Y_0)
mean(dat$Y_1)-mean(dat$Y_0)
path <- "C:/Users/Rachael Ross/Local/Git/Inj-BUP-Availability-Prescribing/"
library(tidyverse)
library(data.table)
library(ggplot2)
library(scales)
library(ggpubr)
library(ggridges)
library(gt)
library(flextable)
library(maps)
library(mapproj)
#library(haven)
############################################
# Load data
############################################
dat <- readRDS(paste0(path,"data/clean/merged.rds")) |>
mutate(state_star = ifelse(state %in% c("AK","AZ","CT","FL","GA","HI","IA","KS","LA",
"MT","NE","NV","OK","OR","SD","TN","TX","WY"), paste0(state,"*"),state))
